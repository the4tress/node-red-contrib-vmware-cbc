{
	"NodeRED HTML Example": {
		"prefix": "nr html",
		"body": [
		  "<script type=\"text/javascript\">",
		  "    RED.nodes.registerType('${1:node-name}',{",
		  "        category: 'CBC ${2|Platform,Endpoint Standard,Enterprise EDR,Live Response,Audit and Remediation|}',",
		  "        color: '#${3|0091DA,00BBD3,00C1D5,78BE20,00C1D5|}',",
		  "        defaults: {",
		  "            server: { value: '', type: 'carbon-black-cloud' }",
		  "        },",
		  "        inputs: 1,",
		  "        outputs: 2,",
		  "        icon: 'file.png',",
		  "        label: function() {",
		  "            return this.name || '${1:node-name}';",
		  "        }",
		  "    });",
		  "</script>",
		  "",
		  "<script type=\"text/html\" data-template-name=\"${1:node-name}\">",
		  "    <div class=\"form-row\">",
		  "        <label for=\"node-input-name\"><i class=\"fa fa-tag\"></i> Name</label>",
		  "        <input type=\"text\" id=\"node-input-name\" placeholder=\"Name\">",
		  "    </div>",
		  "",
		  "    <div class=\"form-row\">",
		  "        <label for=\"node-input-server\"><i class=\"fa fa-tag\"></i> Server</label>",
		  "        <input type=\"text\" id=\"node-input-server\">",
		  "    </div>",
		  "</script>",
		  "",
		  "<script type=\"text/html\" data-help-name=\"${1:node-name}\">",
		  "    <p>${4:Description}</p>",
		  "    <p><a href=\"${5:link to documentation}\">See Documentation</a>",
		  "",
		  "    <h3>Inputs</h3>",
		  "    <dl class=\"message-properties\">",
		  "        <dt>${6:payload}<span class=\"property-type\">${7|object,string,integer|}</span></dt>",
		  "        <dd>${8:Input description}</dd>",
		  "        <dt class=\"optional\">sessionId <span class=\"property-type\">string</span></dt>",
		  "        <dd> the <code>id</code> of the session to close. If this is provided, <code>msg.payload</code> is not required.</dd>",
		  "    </dl>",
		  "",
		  "    <h3>Outputs</h3>",
		  "    <ol class=\"node-ports\">",
		  "        <li>Standard output",
		  "            <dl class=\"message-properties\">",
		  "                <dt>payload <span class=\"property-type\">${9|object,string,integer|}</span></dt>",
		  "                <dd>${10:an object of the response}.</dd>",
		  "            </dl>",
		  "        </li>",
		  "        <li>Standard error",
		  "            <dl class=\"message-properties\">",
		  "                <dt>payload <span class=\"property-type\">string</span></dt>",
		  "                <dd>the standard error of the command.</dd>",
		  "            </dl>",
		  "        </li>",
		  "    </ol>",
		  "</script>"
		],
		"description": "NodeRED HTML Example"
	},

	"NodeRED GET JS Example": {
		"prefix": "nr get js",
		"body": [
			"const https = require('https')",
			"",
			"module.exports = function(RED) {",
			"    function ${1:FunctionName}Node(config) {",
			"        RED.nodes.createNode(this,config);",
			"",
			"        // Retrieve the config node",
			"        this.server = RED.nodes.getNode(config.server);",
			"",
			"        var node = this;",
			"        ",
			"        node.on('input', function(msg) {",
			"            const options = {",
			"                hostname: this.server.domain,",
			"                port: 443,",
			"                path: `/${3:URL}/${${4:this.server.orgKey}}/${5:URL}`,",
			"                method: 'GET',",
			"                headers: {",
			"                    'X-Auth-Token': `${this.server.${6|customApiKey,apiKey,liveResponseApiKey|}}/${this.server.${7|customApiId,apiId,liveResponseApiId|}}`,",
			"                    'Content-Type': 'application/json'",
			"                }",
			"            }",
			"            ",
			"            const req = https.request(options, res => {",
			"                // Start an emptry string for the body. This will be built on as we iterate through the response parts.",
			"                let body = '';",
			"                ",
			"                // Add the response data to the body",
			"                res.on('data', data => {",
			"                    body += data.toString();",
			"                }).on('end', () => {                    ",
			"                    // A ${8|200,204|} is a success",
			"                    if (res.statusCode == ${8|200,204|}) {",
			"                        node.status({",
			"                            text: `statusCode: ${res.statusCode}`,",
			"                            fill: 'green'",
			"                        })",
			"",
			"                        const schema = JSON.parse(body);",
			"                        msg.payload = schema;",
			"                        node.send([msg, null]);",
			"                    } else {",
			"                        node.send([null, body])",
			"                        console.error(body)",
			"                        node.status({",
			"                            text: `statusCode: ${res.statusCode}`,",
			"                            fill: 'red'",
			"                        })",
			"                    }",
			"                })",
			"            })",
			"            ",
			"            req.on('error', error => {",
			"                node.send([null, error])",
			"                console.error(error)",
			"                node.status({",
			"                    text: `statusCode: ${res.statusCode}`,",
			"                    fill: 'red'",
			"                })",
			"            })",
			"            ",
			"            req.end()",
			"        })",
			"    }",
			"",
			"    RED.nodes.registerType('${2:node-name}', ${1:FunctionName}Node);",
			"}"
		],
		"description": "NodeRED GET JS Example"
	},

	"NodeRED POST JS Example": {
		"prefix": "nr post js",
		"body": [
			"const https = require('https')",
			"",
			"module.exports = function(RED) {",
			"    function ${1:FunctionName}Node(config) {",
			"        RED.nodes.createNode(this,config);",
			"",
			"        // Retrieve the config node",
			"        this.server = RED.nodes.getNode(config.server);",
			"",
			"        var node = this;",
			"        ",
			"        node.on('input', function(msg) {",
			"            const data = JSON.stringify(msg.payload);",
			"            const options = {",
			"                hostname: this.server.domain,",
			"                port: 443,",
			"                path: `/${3:URL}/${${4:this.server.orgKey}}/${5:URL}`,",
			"                method: 'POST',",
			"                headers: {",
			"                    'X-Auth-Token': `${this.server.${6|customApiKey,apiKey,liveResponseApiKey|}}/${this.server.${7|customApiId,apiId,liveResponseApiId|}}`,",
			"                    'Content-Type': 'application/json',",
			"                    'Content-Length': data.length",
			"                }",
			"            }",
			"            ",
			"            const req = https.request(options, res => {",
			"                // Start an emptry string for the body. This will be built on as we iterate through the response parts.",
			"                let body = '';",
			"                ",
			"                // Add the response data to the body",
			"                res.on('data', data => {",
			"                    body += data.toString();",
			"                }).on('end', () => {                    ",
			"                    // A ${8|200,204|} is a success             ",
			"                    if (res.statusCode == ${8|200,204|}) {",
			"                        node.status({",
			"                            text: `statusCode: ${res.statusCode}`,",
			"                            fill: 'green'",
			"                        })",
			"",
			"                        const schema = JSON.parse(body);",
			"                        msg.payload = schema;",
			"                        node.send([msg, null]);",
			"                    } else {",
			"                        node.send([null, body])",
			"                        console.error(body)",
			"                        node.status({",
			"                            text: `statusCode: ${res.statusCode}`,",
			"                            fill: 'red'",
			"                        })",
			"                    }",
			"                })",
			"            })",
			"            ",
			"            req.on('error', error => {",
			"                node.send([null, error])",
			"                console.error(error)",
			"                node.status({",
			"                    text: `statusCode: ${res.statusCode}`,",
			"                    fill: 'red'",
			"                })",
			"            })",
			"            ",
			"            req.write(data)",
			"            req.end()",
			"        })",
			"    }",
			"",
			"    RED.nodes.registerType(\"${2:node-name}\", ${1:FunctionName}Node);",
			"}"
		],
		"description": "NodeRED POST JS Example"
	},
	
	"NodeRED DELETE JS Example": {
		"prefix": "nr delete js",
		"body": [
			"const https = require('https')",
			"",
			"module.exports = function(RED) {",
			"    function ${1:FunctionName}Node(config) {",
			"        RED.nodes.createNode(this,config);",
			"",
			"        // Retrieve the config node",
			"        this.server = RED.nodes.getNode(config.server);",
			"",
			"        var node = this;",
			"        ",
			"        node.on('input', function(msg) {",
			"            const data = JSON.stringify({});",
			"            const options = {",
			"                hostname: this.server.domain,",
			"                port: 443,",
			"                path: `/${3:URL}/${${4:this.server.orgKey}}/${5:URL}`,",
			"                method: 'DELETE',",
			"                headers: {",
			"                    'X-Auth-Token': `${this.server.${6|customApiKey,apiKey,liveResponseApiKey|}}/${this.server.${7|customApiId,apiId,liveResponseApiId|}}`,",
			"                    'Content-Type': 'application/json',",
			"                    'Content-Length': data.length",
			"                }",
			"            }",
			"            ",
			"            const req = https.request(options, res => {",
			"                // Start an emptry string for the body. This will be built on as we iterate through the response parts.",
			"                let body = '';",
			"                ",
			"                // Add the response data to the body",
			"                res.on('data', data => {",
			"                    body += data.toString();",
			"                }).on('end', () => {                    ",
			"                    // A ${8|200,204|} is a success",
			"                    if (res.statusCode == ${8|200,204|}) {",
			"                        node.status({",
			"                            text: `statusCode: ${res.statusCode}`,",
			"                            fill: 'green'",
			"                        })",
			"                        node.send([msg, null]);",
			"                    } else {",
			"                        node.send([null, body])",
			"                        console.error(body)",
			"                        node.status({",
			"                            text: `statusCode: ${res.statusCode}`,",
			"                            fill: 'red'",
			"                        })",
			"                    }",
			"                })",
			"            })",
			"            ",
			"            req.on('error', error => {",
			"                node.send([null, error])",
			"                console.error(error)",
			"                node.status({",
			"                    text: `statusCode: ${res.statusCode}`,",
			"                    fill: 'red'",
			"                })",
			"            })",
			"            ",
			"            req.write(data)",
			"            req.end()",
			"        })",
			"    }",
			"",
			"    RED.nodes.registerType(\"${2:node-name}\", ${1:FunctionName}Node);",
			"}"
		],
		"description": "NodeRED DELETE JS Example"
	}
}